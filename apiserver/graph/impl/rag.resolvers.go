package impl

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/kubeagi/arcadia/apiserver/graph/generated"
)

// Rag is the resolver for the RAG field.
func (r *mutationResolver) Rag(ctx context.Context) (*generated.RAGMutation, error) {
	panic(fmt.Errorf("not implemented: Rag - RAG"))
}

// Rag is the resolver for the RAG field.
func (r *queryResolver) Rag(ctx context.Context) (*generated.RAGQuery, error) {
	panic(fmt.Errorf("not implemented: Rag - RAG"))
}

// Application is the resolver for the application field.
func (r *rAGResolver) Application(ctx context.Context, obj *generated.Rag) (*generated.Application, error) {
	panic(fmt.Errorf("not implemented: Application - application"))
}

// Datasets is the resolver for the datasets field.
func (r *rAGResolver) Datasets(ctx context.Context, obj *generated.Rag) ([]*generated.RAGDataset, error) {
	panic(fmt.Errorf("not implemented: Datasets - datasets"))
}

// JudgeLlm is the resolver for the judgeLLM field.
func (r *rAGResolver) JudgeLlm(ctx context.Context, obj *generated.Rag) (*generated.Llm, error) {
	panic(fmt.Errorf("not implemented: JudgeLlm - judgeLLM"))
}

// Metrics is the resolver for the metrics field.
func (r *rAGResolver) Metrics(ctx context.Context, obj *generated.Rag) ([]*generated.RAGMetric, error) {
	panic(fmt.Errorf("not implemented: Metrics - metrics"))
}

// CreateRag is the resolver for the createRAG field.
func (r *rAGMutationResolver) CreateRag(ctx context.Context, obj *generated.RAGMutation, input generated.CreateRAGInput) (*generated.Rag, error) {
	panic(fmt.Errorf("not implemented: CreateRag - createRAG"))
}

// UpdateRag is the resolver for the updateRAG field.
func (r *rAGMutationResolver) UpdateRag(ctx context.Context, obj *generated.RAGMutation, input *generated.UpdateRAGInput) (*generated.Rag, error) {
	panic(fmt.Errorf("not implemented: UpdateRag - updateRAG"))
}

// DeleteRag is the resolver for the deleteRAG field.
func (r *rAGMutationResolver) DeleteRag(ctx context.Context, obj *generated.RAGMutation, input *generated.DeleteRAGInput) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteRag - deleteRAG"))
}

// GetRag is the resolver for the getRAG field.
func (r *rAGQueryResolver) GetRag(ctx context.Context, obj *generated.RAGQuery, name string, namespace string) (*generated.Rag, error) {
	panic(fmt.Errorf("not implemented: GetRag - getRAG"))
}

// ListRag is the resolver for the listRAG field.
func (r *rAGQueryResolver) ListRag(ctx context.Context, obj *generated.RAGQuery, input generated.ListRAGInput) (*generated.PaginatedResult, error) {
	panic(fmt.Errorf("not implemented: ListRag - listRAG"))
}

// RAG returns generated.RAGResolver implementation.
func (r *Resolver) RAG() generated.RAGResolver { return &rAGResolver{r} }

// RAGMutation returns generated.RAGMutationResolver implementation.
func (r *Resolver) RAGMutation() generated.RAGMutationResolver { return &rAGMutationResolver{r} }

// RAGQuery returns generated.RAGQueryResolver implementation.
func (r *Resolver) RAGQuery() generated.RAGQueryResolver { return &rAGQueryResolver{r} }

type rAGResolver struct{ *Resolver }
type rAGMutationResolver struct{ *Resolver }
type rAGQueryResolver struct{ *Resolver }
