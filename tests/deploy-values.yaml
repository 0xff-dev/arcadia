global:
  oss:
    bucket: &default-oss-bucket "arcadia"
# @section controller is used as the core controller for arcadia
# @param image Image to be used
# @param imagePullPolcy ImagePullPolicy
# @param resources Resources to be used
controller:
  image: kubeagi/arcadia:v0.1.0-20231207-11c8738
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 10m
      memory: 64Mi
# graphql and bff server
apiserver:
  image: kubeagi/arcadia:v0.1.0-20231207-11c8738
  enableplayground: false
  # update the namespace if we use different one
  dataProcessURL: http://arcadia-dataprocess:28888
  port: 8081
  ingress:
    path: kubeagi-apis
    host: portal.test.nip.io
  oidc:
    enabled: false
    clientID: bff-client
    issuerURL: https://portal.test.nip.io/oidc
    clientSecret: 61324af0-1234-4f61-b110-ef57013267d6
    masterURL: https://k8s.test.nip.io
# portal
portal:
  enabled: true
  kubebbEnabled: false
  image: yuntibuild/kubeagi-portal:0.1.0
  port: 80
  ingress:
    path: kubeagi-portal-public
    host: portal.test.nip.io

# @section fastchat is used as fastchat configurations for arcadia
fastchat:
  image:
    repository: kubeagi/arcadia-fastchat
    # Use either v0.1.0 or vllm-v0.1.0(with vllm enabled)
    tag: v0.1.0
  ingress:
    enabled: false
    className: portal-ingress
    hosts:
      - host: fastchat-api.test.nip.io
        paths:
          - path: /
            port: 8000
            pathType: ImplementationSpecific

# @section oss is used as default Object-Storage-Service for arcadia which provides the capability to
# - host user-uploaded data files as local datasource
# - host user-uploaded models
# The following params comes from kubeagi/minio in repository https://kubebb.github.io/components
# @param oss.enabled Enable Object-Storage-Service in arcadia
# @param oss.buckets List of default buckets in arcadia
minio:
  image:
    repository: kubeagi/minio
    tag: RELEASE.2023-02-10T18-48-39Z
  mode: standalone
  rootUser: "admin"
  rootPassword: "Passw0rd!"
  persistence:
    enabled: true
    storageClass: "standard"
    size: 30Gi
  ingress:
    # disable for test scenario
    enabled: false
    api:
      enabled: false
      insecure: true
      port: 9000
      host: arcadia-minio:9000
    console:
      enabled: false
      port: 9001
      host: minio-console:9001
    cert:
      ipAddresses:
      - test
      dnsNames:
      - minio-api.test.nip.io
      - minio-console.test.nip.io

  buckets:
    # Name of the bucket
    - name: *default-oss-bucket
      # Policy to be set on the
      # bucket [none|download|upload|public|custom]
      # if set to custom, customPolicy must be set.
      policy: "none"
      # set versioning for
      # bucket [true|false]
      versioning: false
      # set objectlocking for
      # bucket [true|false] NOTE: versioning is enabled by default if you use locking
      objectlocking: false

vectorstore:
  # update the namespace if we use different one, update to pgvector later
  url: http://arcadia-chromadb:8000
  chroma:
    distanceFunction: cosine

dataprocess:
  enabled: true
  image: kubeagi/data-processing:v0.1.0
  port: 28888
  env:
    minio:
      secure: "False"
      apiURL: arcadia-minio:9000
    knowledge:
      chunkSize: 500
      chunkOverlap: 50
    postgres:
      # update to the actual values
      host: postgresql
      port: 5432
      user: admin
      password: Passw0rd!
      database: arcadia

chromadb:
  image:
    repository: ghcr.io/amikos-tech/chromadb-chart/chroma
  chromadb:
    auth:
      enabled: false
    dataVolumeStorageClass: "standard"
    apiVersion: "0.4.14"
