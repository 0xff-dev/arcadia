package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/kubeagi/arcadia/graphql-server/go-server/graph/model"
	"github.com/kubeagi/arcadia/graphql-server/go-server/pkg/datasource"
)

// CreateDatasource is the resolver for the createDatasource field.
func (r *mutationResolver) CreateDatasource(ctx context.Context, input model.CreateDatasource) (*model.Datasource, error) {
	url, authSecret := "", ""
	var insecure bool
	if input.URL != nil {
		url = *input.URL
	}
	if input.Authsecret != nil {
		authSecret = *input.Authsecret
	}
	if input.Insecure != nil {
		insecure = *input.Insecure
	}
	return datasource.CreateDatasource(ctx, input.Name, input.Namespace, url, authSecret, insecure)
}

// Ds is the resolver for the ds field.
func (r *queryResolver) Ds(ctx context.Context, input model.QueryDatasource) ([]*model.Datasource, error) {
	name := ""
	labelSelector, fieldSelector := "", ""
	if input.Name != nil {
		name = *input.Name
	}
	if input.FieldSelector != nil {
		fieldSelector = *input.FieldSelector
	}
	if input.LabelSelector != nil {
		labelSelector = *input.LabelSelector
	}
	return datasource.DatasourceList(ctx, name, input.Namespace, labelSelector, fieldSelector)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
