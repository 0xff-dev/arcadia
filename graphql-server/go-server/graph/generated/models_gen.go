// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"time"
)

type PageNode interface {
	IsPageNode()
}

// 新增数据源时输入条件
type CreateDatasourceInput struct {
	// 数据源资源名称（不可同名）
	Name string `json:"name"`
	// 数据源创建命名空间
	Namespace string `json:"namespace"`
	// 数据源资源标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 数据源资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 数据源资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 数据源资源描述
	Description *string `json:"description,omitempty"`
	// 提供对象存储时输入条件
	Endpointinput *EndpointInput `json:"endpointinput,omitempty"`
	Ossinput      *OssInput      `json:"ossinput,omitempty"`
}

type CreateEmbedderInput struct {
	// 模型服务资源名称（不可同名）
	Name string `json:"name"`
	// 模型服务创建命名空间
	Namespace string `json:"namespace"`
	// 模型服务资源标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 模型服务资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 模型服务资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 模型服务资源描述
	Description   *string        `json:"description,omitempty"`
	Endpointinput *EndpointInput `json:"endpointinput,omitempty"`
	// 模型服务类型
	ServiceType *string `json:"serviceType,omitempty"`
}

type CreateKnowledgeBaseInput struct {
	// 知识库资源名称（不可同名）
	Name string `json:"name"`
	// 知识库创建命名空间
	Namespace string `json:"namespace"`
	// 知识库资源标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 知识库资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 知识库资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 知识库资源描述
	Description *string `json:"description,omitempty"`
	// 模型服务
	Embedder *TypedObjectReferenceInput `json:"embedder,omitempty"`
	// "向量数据库(使用默认值)
	VectorStore *TypedObjectReferenceInput `json:"vectorStore,omitempty"`
	// 知识库文件
	FileGroups []*Filegroupinput `json:"fileGroups,omitempty"`
}

type CreateModelInput struct {
	// 模型仓库资源名称（不可同名）
	Name string `json:"name"`
	// 模型仓库创建命名空间
	Namespace string `json:"namespace"`
	// 模型仓库资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 模型仓库应用领域
	Field string `json:"field"`
	// 模型仓库资源描述
	Description *string `json:"description,omitempty"`
	// 模型仓库类型
	Modeltype string `json:"modeltype"`
}

type Datasource struct {
	Name            string                 `json:"name"`
	Namespace       string                 `json:"namespace"`
	Labels          map[string]interface{} `json:"labels,omitempty"`
	Annotations     map[string]interface{} `json:"annotations,omitempty"`
	Creator         *string                `json:"creator,omitempty"`
	DisplayName     string                 `json:"displayName"`
	Description     *string                `json:"description,omitempty"`
	Endpoint        *Endpoint              `json:"endpoint,omitempty"`
	Oss             *Oss                   `json:"oss,omitempty"`
	Status          *string                `json:"status,omitempty"`
	FileCount       *int                   `json:"fileCount,omitempty"`
	UpdateTimestamp time.Time              `json:"updateTimestamp"`
}

func (Datasource) IsPageNode() {}

type DatasourceMutation struct {
	CreateDatasource Datasource `json:"createDatasource"`
	UpdateDatasource Datasource `json:"updateDatasource"`
	DeleteDatasource *string    `json:"deleteDatasource,omitempty"`
}

type DatasourceQuery struct {
	GetDatasource   Datasource      `json:"getDatasource"`
	ListDatasources PaginatedResult `json:"listDatasources"`
}

type DeleteDatasourceInput struct {
	Name      *string `json:"name,omitempty"`
	Namespace string  `json:"namespace"`
	// 筛选器
	LabelSelector *string `json:"labelSelector,omitempty"`
	FieldSelector *string `json:"fieldSelector,omitempty"`
}

type DeleteEmbedderInput struct {
	Name      *string `json:"name,omitempty"`
	Namespace string  `json:"namespace"`
	// 标签选择器
	LabelSelector *string `json:"labelSelector,omitempty"`
	// 字段选择器
	FieldSelector *string `json:"fieldSelector,omitempty"`
}

type DeleteKnowledgeBaseInput struct {
	Name      *string `json:"name,omitempty"`
	Namespace string  `json:"namespace"`
	// 标签选择器
	LabelSelector *string `json:"labelSelector,omitempty"`
	// 字段选择器
	FieldSelector *string `json:"fieldSelector,omitempty"`
}

type DeleteModelInput struct {
	Name      *string `json:"name,omitempty"`
	Namespace string  `json:"namespace"`
	// 标签选择器
	LabelSelector *string `json:"labelSelector,omitempty"`
	// 字段选择器
	FieldSelector *string `json:"fieldSelector,omitempty"`
}

type Embedder struct {
	Name            string                 `json:"name"`
	Namespace       string                 `json:"namespace"`
	Labels          map[string]interface{} `json:"labels,omitempty"`
	Annotations     map[string]interface{} `json:"annotations,omitempty"`
	Creator         *string                `json:"creator,omitempty"`
	DisplayName     string                 `json:"displayName"`
	Description     *string                `json:"description,omitempty"`
	Endpoint        *Endpoint              `json:"endpoint,omitempty"`
	ServiceType     *string                `json:"serviceType,omitempty"`
	UpdateTimestamp *time.Time             `json:"updateTimestamp,omitempty"`
}

func (Embedder) IsPageNode() {}

type EmbedderMutation struct {
	CreateEmbedder Embedder `json:"createEmbedder"`
	UpdateEmbedder Embedder `json:"updateEmbedder"`
	DeleteEmbedder *string  `json:"deleteEmbedder,omitempty"`
}

type EmbedderQuery struct {
	GetEmbedder   Embedder        `json:"getEmbedder"`
	ListEmbedders PaginatedResult `json:"listEmbedders"`
}

type Endpoint struct {
	URL        *string               `json:"url,omitempty"`
	AuthSecret *TypedObjectReference `json:"authSecret,omitempty"`
	Insecure   *bool                 `json:"insecure,omitempty"`
}

// 对象存储终端输入
type EndpointInput struct {
	URL *string `json:"url,omitempty"`
	// secret验证密码
	AuthSecret *TypedObjectReferenceInput `json:"authSecret,omitempty"`
	// 默认true
	Insecure *bool `json:"insecure,omitempty"`
}

type KnowledgeBase struct {
	Name        string                 `json:"name"`
	Namespace   string                 `json:"namespace"`
	Labels      map[string]interface{} `json:"labels,omitempty"`
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	Creator     *string                `json:"creator,omitempty"`
	DisplayName string                 `json:"displayName"`
	Description *string                `json:"description,omitempty"`
	Embedder    *TypedObjectReference  `json:"embedder,omitempty"`
	VectorStore *TypedObjectReference  `json:"vectorStore,omitempty"`
	FileGroups  []*Filegroup           `json:"fileGroups,omitempty"`
	// 知识库连接状态
	Status          *string   `json:"status,omitempty"`
	UpdateTimestamp time.Time `json:"updateTimestamp"`
}

func (KnowledgeBase) IsPageNode() {}

type KnowledgeBaseMutation struct {
	CreateKnowledgeBase KnowledgeBase `json:"createKnowledgeBase"`
	UpdateKnowledgeBase KnowledgeBase `json:"updateKnowledgeBase"`
	DeleteKnowledgeBase *string       `json:"deleteKnowledgeBase,omitempty"`
}

type KnowledgeBaseQuery struct {
	GetKnowledgeBase   KnowledgeBase   `json:"getKnowledgeBase"`
	ListKnowledgeBases PaginatedResult `json:"listKnowledgeBases"`
}

// 分页查询输入
type ListDatasourceInput struct {
	// 数据源资源名称（不可同名）
	Name *string `json:"name,omitempty"`
	// 数据源创建命名空间
	Namespace string `json:"namespace"`
	// 数据源资源展示名称
	DisplayName   *string `json:"displayName,omitempty"`
	LabelSelector *string `json:"labelSelector,omitempty"`
	FieldSelector *string `json:"fieldSelector,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Keyword       *string `json:"keyword,omitempty"`
}

type ListEmbedderInput struct {
	Name        *string `json:"name,omitempty"`
	Namespace   string  `json:"namespace"`
	DisplayName *string `json:"displayName,omitempty"`
	// 标签选择器
	LabelSelector *string `json:"labelSelector,omitempty"`
	// 字段选择器
	FieldSelector *string `json:"fieldSelector,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Keyword       *string `json:"keyword,omitempty"`
}

type ListKnowledgeBaseInput struct {
	Name        *string `json:"name,omitempty"`
	Namespace   string  `json:"namespace"`
	DisplayName *string `json:"displayName,omitempty"`
	// 标签选择器
	LabelSelector *string `json:"labelSelector,omitempty"`
	// 字段选择器
	FieldSelector *string `json:"fieldSelector,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Keyword       *string `json:"keyword,omitempty"`
}

type ListModelInput struct {
	Name        *string `json:"name,omitempty"`
	Namespace   string  `json:"namespace"`
	DisplayName *string `json:"displayName,omitempty"`
	// 标签选择器
	LabelSelector *string `json:"labelSelector,omitempty"`
	// 字段选择器
	FieldSelector *string `json:"fieldSelector,omitempty"`
	Page          *int    `json:"page,omitempty"`
	PageSize      *int    `json:"pageSize,omitempty"`
	Keyword       *string `json:"keyword,omitempty"`
}

type Model struct {
	Name            string                 `json:"name"`
	Namespace       string                 `json:"namespace"`
	Labels          map[string]interface{} `json:"labels,omitempty"`
	Annotations     map[string]interface{} `json:"annotations,omitempty"`
	Creator         *string                `json:"creator,omitempty"`
	DisplayName     string                 `json:"displayName"`
	Description     *string                `json:"description,omitempty"`
	Field           string                 `json:"field"`
	Modeltype       string                 `json:"modeltype"`
	UpdateTimestamp *time.Time             `json:"updateTimestamp,omitempty"`
}

func (Model) IsPageNode() {}

type ModelMutation struct {
	CreateModel Model   `json:"createModel"`
	UpdateModel Model   `json:"updateModel"`
	DeleteModel *string `json:"deleteModel,omitempty"`
}

type ModelQuery struct {
	GetModel   Model           `json:"getModel"`
	ListModels PaginatedResult `json:"listModels"`
}

type Oss struct {
	Bucket *string `json:"bucket,omitempty"`
	Object *string `json:"Object,omitempty"`
}

// 文件输入
type OssInput struct {
	Bucket *string `json:"bucket,omitempty"`
	Object *string `json:"Object,omitempty"`
}

type PaginatedResult struct {
	HasNextPage bool       `json:"hasNextPage"`
	Nodes       []PageNode `json:"nodes,omitempty"`
	Page        *int       `json:"page,omitempty"`
	PageSize    *int       `json:"pageSize,omitempty"`
	TotalCount  int        `json:"totalCount"`
}

type TypedObjectReference struct {
	APIGroup  *string `json:"apiGroup,omitempty"`
	Kind      string  `json:"kind"`
	Name      string  `json:"Name"`
	Namespace *string `json:"Namespace,omitempty"`
}

type TypedObjectReferenceInput struct {
	APIGroup  *string `json:"apiGroup,omitempty"`
	Kind      string  `json:"kind"`
	Name      string  `json:"Name"`
	Namespace *string `json:"Namespace,omitempty"`
}

type UpdateDatasourceInput struct {
	// 数据源资源名称（不可同名）
	Name string `json:"name"`
	// 数据源创建命名空间
	Namespace string `json:"namespace"`
	// 数据源资源标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 数据源资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 数据源资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 数据源资源描述
	Description *string `json:"description,omitempty"`
}

type UpdateEmbedderInput struct {
	// 模型服务资源名称（不可同名）
	Name string `json:"name"`
	// 模型服务创建命名空间
	Namespace string `json:"namespace"`
	// 模型服务资源标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 模型服务资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 模型服务资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 模型服务资源描述
	Description *string `json:"description,omitempty"`
}

type UpdateKnowledgeBaseInput struct {
	// 知识库资源名称（不可同名）
	Name string `json:"name"`
	// 知识库创建命名空间
	Namespace string `json:"namespace"`
	// 知识库资源标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 知识库资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 知识库资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 知识库资源描述
	Description *string `json:"description,omitempty"`
}

type UpdateModelInput struct {
	// 模型仓库资源名称（不可同名）
	Name string `json:"name"`
	// 模型仓库创建命名空间
	Namespace string `json:"namespace"`
	// 模型仓库资标签
	Labels map[string]interface{} `json:"labels,omitempty"`
	// 模型仓库资源注释
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// 模型仓库资源展示名称作为显示，并提供编辑
	DisplayName string `json:"displayName"`
	// 模型仓库资源描述
	Description *string `json:"description,omitempty"`
}

type Filegroup struct {
	Source *TypedObjectReference `json:"source,omitempty"`
	Path   []string              `json:"path,omitempty"`
}

// 源文件输入
type Filegroupinput struct {
	// 数据源字段
	Source TypedObjectReferenceInput `json:"source"`
	// 路径
	Path []string `json:"path,omitempty"`
}
